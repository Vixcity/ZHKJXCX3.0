{"version":3,"sources":["../src/steps/step-item.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,cAAc,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAOpF,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,cAAc;IAClD,OAAO;;MAEL;IAEF,SAAS,EAAE,gBAAgB,CAIzB;IAEF,eAAe,WAMb;IAEF,UAAU,mCAAS;IAGnB,IAAI;;;;;;;;;;;;;;;;MAgBF;IAEF,SAAS;;MAMP;IAEF,SAAS;;MAUP;IAEF,OAAO;;;MA2FL;CACH","file":"step-item.d.ts","sourcesContent":["import { wxComponent, SuperComponent, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport props from './step-item-props';\n\nconst { prefix } = config;\n\n@wxComponent()\nexport default class StepItem extends SuperComponent {\n  options = {\n    multipleSlots: true,\n  };\n\n  relations: RelationsOptions = {\n    './steps': {\n      type: 'ancestor',\n    },\n  };\n\n  externalClasses = [\n    `${prefix}-class`,\n    `${prefix}-class-content`,\n    `${prefix}-class-title`,\n    `${prefix}-class-description`,\n    `${prefix}-class-extra`,\n  ];\n\n  properties = props;\n\n  // 组件的内部数据\n  data = {\n    classPrefix: `${prefix}-steps-item`,\n    prefix,\n    rootClassName: '',\n    parent: null,\n    index: 0,\n    isDot: false,\n    curStatus: '',\n    curSubStepItems: [],\n    curSubStepItemsStatus: [],\n    layout: 'vertical',\n    type: 'default',\n    isLastChild: false,\n    isLarge: false,\n    readonly: false,\n    computedIcon: '',\n  };\n\n  observers = {\n    icon(val) {\n      this.setData({\n        computedIcon: val,\n      });\n    },\n  };\n\n  lifetimes = {\n    ready() {\n      const [parent] = this.getRelationNodes('./steps') || [];\n\n      if (parent) {\n        this.setData({\n          parent,\n        });\n      }\n    },\n  };\n\n  methods = {\n    updateStatus(current, currentStatus, index, theme, layout, steps, readonly) {\n      const _current = String(current);\n      const connectLine = '-';\n\n      const judgeObjAttr = (data, attr: string) => {\n        return Array.isArray(data[attr]) && data[attr].length;\n      };\n\n      const getStepLevel = (s) => {\n        const reg = new RegExp(`(.*)${connectLine}{1}.*`);\n        return s.replace(reg, '$1');\n      };\n\n      const isSameLevelStep = (stepsTag: string, current: string) => {\n        return stepsTag.length < current.length && getStepLevel(stepsTag) === getStepLevel(current);\n      };\n\n      /**\n       * 步骤条状态优先级：status > currentStatus > 子步骤影响\n       * 子步骤影响优先级： finish > error > process\n       */\n      const stepFinalStatus = (item, itemTag, current: string, currentStatus) => {\n        let tempStepStatus = '';\n        if (item.status !== 'default' && item.status !== undefined) {\n          tempStepStatus = item.status === '' ? 'default' : item.status;\n        } else {\n          tempStepStatus = 'default';\n          if (itemTag < current) {\n            tempStepStatus = 'finish';\n          } else if (itemTag === current && item.status !== '') {\n            tempStepStatus = currentStatus;\n          }\n\n          if (isSameLevelStep(itemTag, current)) {\n            if (judgeObjAttr(item, 'subStepItems')) {\n              const tempStepItemsStatus = item.subStepItems.map((subItem, subIndex) => {\n                const subItemTag = `${itemTag}${connectLine}${subIndex}`;\n                return stepFinalStatus(subItem, subItemTag, current, currentStatus);\n              });\n\n              if (tempStepItemsStatus[tempStepItemsStatus.length - 1] === 'finish') {\n                tempStepStatus = 'finish';\n                return tempStepStatus;\n              }\n              if (tempStepItemsStatus.includes('process') || tempStepItemsStatus.every((item) => item === 'default')) {\n                tempStepStatus = 'process';\n              }\n              if (tempStepItemsStatus.includes('error')) {\n                tempStepStatus = 'error';\n              }\n            }\n          }\n        }\n        return tempStepStatus;\n      };\n\n      // step status\n      this.data.tempStatus = stepFinalStatus(this.data, String(index), _current, currentStatus);\n      const tempStatusList = [];\n      if (judgeObjAttr(this.data, 'subStepItems')) {\n        this.data.subStepItems.forEach((subItem, subIndex) => {\n          tempStatusList.push(stepFinalStatus(subItem, `${index}${connectLine}${subIndex}`, _current, currentStatus));\n        });\n      }\n\n      // update icon\n      const tempIcon = new Map([\n        ['finish', 'check'],\n        ['error', 'close'],\n      ]);\n      let iconStatus = '';\n      if (readonly && tempIcon.has(this.data.tempStatus)) {\n        iconStatus = tempIcon.get(this.data.tempStatus);\n      }\n\n      this.setData({\n        curStatus: this.data.tempStatus,\n        curSubStepItems: this.data.subStepItems || [],\n        curSubStepItemsStatus: tempStatusList || [],\n        computedIcon: iconStatus || this.data.icon,\n        index,\n        isDot: theme === 'dot' && layout === 'vertical',\n        layout,\n        theme,\n        isLastChild: steps.length - 1 === index,\n      });\n    },\n    click() {\n      this.data.parent.handleClick(this.data.index);\n    },\n  };\n}\n"]}