{"version":3,"sources":["../src/dropdown-menu/dropdown-item.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAIpF,OAAO,KAAK,EAAE,mBAAmB,EAAE,MAAM,QAAQ,CAAC;AAMlD,MAAM,WAAW,iBAAkB,SAAQ,mBAAmB;CAAG;AAEjE,MAAM,CAAC,OAAO,OAAO,gBAAiB,SAAQ,cAAc;IAC1D,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAER;IAEF,IAAI;;;;;;;;;;;;;;;MAeF;IAEF,SAAS,EAAE,gBAAgB,CAezB;IAEF,eAAe;;;QAKb;IAEF,SAAS;;;MAeP;IAEF,SAAS;;MAkBP;IAEF,OAAO;;;;;;;;;MAkGL;CACH","file":"dropdown-item.d.ts","sourcesContent":["import { RelationsOptions, SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './dropdown-item-props';\nimport menuProps from './props';\nimport type { TdDropdownItemProps } from './type';\nimport { equal, clone } from '../common/utils';\n\nconst { prefix } = config;\nconst name = `${prefix}-dropdown-item`;\n\nexport interface DropdownItemProps extends TdDropdownItemProps {}\n@wxComponent()\nexport default class DropdownMenuItem extends SuperComponent {\n  properties = {\n    ...props,\n  };\n\n  data = {\n    prefix,\n    classPrefix: name,\n    show: false,\n    bar: null,\n    top: 0,\n    maskHeight: 0,\n    contentClasses: '',\n    leafLevel: 0,\n    treeOptions: [],\n    initValue: null,\n    hasChanged: false,\n    duration: menuProps.duration.value,\n    zIndex: menuProps.zIndex.value,\n    overlay: menuProps.overlay.value,\n  };\n\n  relations: RelationsOptions = {\n    './dropdown-menu': {\n      type: 'parent',\n      linked(target) {\n        const { zIndex, duration, overlay } = target.properties;\n\n        this.getParentBottom(target);\n        this.setData({\n          bar: target,\n          zIndex,\n          duration,\n          overlay,\n        });\n      },\n    },\n  };\n\n  controlledProps = [\n    {\n      key: 'value',\n      event: 'change',\n    },\n  ];\n\n  observers = {\n    value(v) {\n      if (this.data.multiple) {\n        if (!Array.isArray(v)) throw TypeError('应传入数组类型的 value');\n      }\n\n      if (this.data.optionsLayout === 'tree') {\n        this.buildTreeOptions();\n      }\n    },\n    'initValue, value'(v1, v2) {\n      this.setData({\n        hasChanged: !equal(v1, v2),\n      });\n    },\n  };\n\n  lifetimes = {\n    attached() {\n      const { multiple, optionsLayout, value, defaultValue } = this.data;\n      const isTree = optionsLayout === 'tree';\n      const contentClassesObj = {\n        [`${prefix}-is-tree`]: isTree,\n        [`${prefix}-is-single`]: !isTree && !multiple,\n        [`${prefix}-is-multi`]: !isTree && multiple,\n      };\n      const contentClasses = Object.keys(contentClassesObj)\n        .filter((e) => contentClassesObj[e] === true)\n        .join(' ');\n\n      this.setData({\n        contentClasses,\n        initValue: clone(value || defaultValue),\n      });\n    },\n  };\n\n  methods = {\n    buildTreeOptions() {\n      const { options, value, multiple } = this.data;\n      const treeOptions = [];\n      let level = -1;\n      let node = { options };\n\n      while (node && node.options) {\n        level += 1;\n        const list = node.options;\n        const thisValue = value?.[level];\n\n        treeOptions.push([...list]);\n\n        if (thisValue == null) {\n          const [firstChild] = list;\n          node = firstChild;\n        } else {\n          const child = list.find((child) => child.value === thisValue);\n          node = child ?? list[0];\n        }\n      }\n\n      const leafLevel = Math.max(0, level);\n\n      if (multiple) {\n        const finalValue = this.data.value || this.data.defaultValue;\n        if (!Array.isArray(finalValue[leafLevel])) {\n          throw TypeError('应传入数组类型的 value');\n        }\n      }\n\n      this.setData({\n        leafLevel,\n        treeOptions,\n      });\n    },\n\n    closeDropdown() {\n      this.data.bar.setData({\n        activeIdx: -1,\n      });\n      this.setData({\n        show: false,\n      });\n    },\n\n    getParentBottom(parent) {\n      const query = wx.createSelectorQuery().in(parent);\n      query\n        .select(`#${prefix}-bar`)\n        .boundingClientRect((res) => {\n          this.setData({\n            top: res.bottom,\n            maskHeight: res.top,\n          });\n        })\n        .exec();\n    },\n\n    handleTreeClick(e) {\n      const { level, value: itemValue } = e.currentTarget.dataset;\n      const { value } = this.data;\n\n      value[level] = itemValue;\n      this._trigger('change', { value });\n    },\n\n    handleRadioChange(e) {\n      let { value } = this.data;\n      const { value: itemValue } = e.detail;\n      const { level } = e.target.dataset;\n\n      if (this.data.optionsLayout === 'tree') {\n        value[level] = itemValue;\n      } else {\n        value = itemValue;\n      }\n\n      this._trigger('change', { value });\n    },\n\n    handleMaskClick() {\n      const { bar } = this.data;\n\n      if (bar && bar.properties.closeOnClickOverlay) {\n        this.closeDropdown();\n      }\n    },\n\n    handleReset() {\n      this._trigger('change', { value: clone(this.data.initValue) });\n    },\n\n    handleConfirm() {\n      this._trigger('confirm', { value: this.data.value });\n      this.closeDropdown();\n    },\n  };\n}\n"]}